#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('server:serv');
const socketDebug = require('debug')('socket');
const http = require('http');
// const io = require('socket.io'); -> not work

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app.callback());

// socket connection for chat
const users = {};
const io = require('socket.io').listen(server);
io.sockets.on('connection', function (socket) {
  socketDebug(`Connection new user: id=${socket.id}`);

  // добавляем подключившегося пользователя в словарь
  users[socket.id] = {
    id: socket.id,
    username: socket.request.headers.username
  };
  // рассылаем информацию о событии на клиент
  socket.json.emit('all users', users);
  socket.broadcast.json.emit('new user', users[socket.id]);

  socket.on('chat message', function (data, activeRoom) {
    // отправляем сообщение в заданную комнату
    socket.broadcast
      .to(activeRoom)
      .json.emit('chat message', data, socket.id);
  });

  socket.on('disconnect', function (client) {
    socketDebug(`Client disconnect: id=${socket.id}`);

    // удаляем пользователя
    delete users[socket.id];
    // в команте обновляем список пользователей на клиенте
    socket.broadcast
      .emit('delete user', socket.id);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
